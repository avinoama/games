<?php

/**
 * @file
 * Describe basic game entities needed for playing a game
 *
 */

/**
 * Implements hook_entity_info().
 */
function game_entity_info() {
  $return = array();
  $return['game'] = array(
      'label' => t('Game'),
      'entity class' => 'Game',
      'controller class' => 'GameController',
      'base table' => 'game',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'gid',
          'bundle' => 'type',
      ),
      'bundle keys' => array(
          'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'game_load',
      'view modes' => array(
          'full' => array(
              'label' => t('Default'),
              'custom settings' => FALSE,
          ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'game',
      'access callback' => 'game_access',
  );

  $return['game_type'] = array(
      'label' => t('Game Type'),
      'entity class' => 'GameType',
      'controller class' => 'GameTypeController',
      'base table' => 'game_type',
      'fieldable' => FALSE,
      'bundle of' => 'game',
      'exportable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
          'name' => 'type',
          'label' => 'label',
      ),
      'module' => 'game',
      // Enable the entity API's admin UI.
      'admin ui' => array(
          'path' => 'admin/structure/game-types',
          'file' => 'game.admin.inc',
          'controller class' => 'GameTypeUIController',
      ),
      'access callback' => 'game_type_access',
  );

  $return['running_game'] = array(
      'label' => t('RunningGame'),
      'entity class' => 'RunningGame',
      'controller class' => 'RunningGameController',
      'base table' => 'running_game',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
          'bundle' => 'type',
      ),
      'bundle keys' => array(
          'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'running_game_load',
      'view modes' => array(
          'full' => array(
              'label' => t('Default'),
              'custom settings' => FALSE,
          ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'game',
      'access callback' => 'running_game_access',
      'admin ui' => array(
          'path' => 'admin/structure/running-game',
          'file' => 'game.admin.inc',
          'controller class' => 'RunningGameUIController',
      ),
  );


  $return['running_game_command'] = array(
      'label' => t('Running Game Command'),
      'entity class' => 'RunningGameCommand',
      'controller class' => 'RunningGameCommandController',
      'base table' => 'running_game_command',
      'fieldable' => FALSE,
      'entity keys' => array(
          'id' => "id",
      ),
      'bundles' => array(),
      'load hook' => 'running_game_command_load',
      'view modes' => array(
          'full' => array(
              'label' => t('Default'),
              'custom settings' => FALSE,
          ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'game',
      'access callback' => 'running_game_command_access',
  );


  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function game_entity_info_alter(&$entity_info) {
  foreach (game_types() as $type => $info) {
    $entity_info['game']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
            'path' => 'admin/structure/game-types/manage/%game_type',
            'real path' => 'admin/structure/game-types/manage/' . $type,
            'bundle argument' => 4,
        ),
    );
    $entity_info['running_game']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
            'path' => 'admin/structure/game-types/manage/%game_type',
            'real path' => 'admin/structure/game-types/manage/' . $type,
            'bundle argument' => 4,
        ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function game_permission() {
  $permissions = array(
      'administer game types' => array(
          'title' => t('Administer game types'),
          'description' => t('Allows users to configure game types and their fields.'),
          'restrict access' => TRUE,
      ),
      'create game entities' => array(
          'title' => t('Create game'),
          'description' => t('Allows users to create game.'),
          'restrict access' => TRUE,
      ),
      'play game entities' => array(
          'title' => t('play game'),
          'description' => t('Allows users to play game.'),
          'restrict access' => TRUE,
      ),
      'view game entities' => array(
          'title' => t('View game'),
          'description' => t('Allows users to view game.'),
          'restrict access' => TRUE,
      ),
      'edit any game entities' => array(
          'title' => t('Edit any game'),
          'description' => t('Allows users to edit any game.'),
          'restrict access' => TRUE,
      ),
      'edit own game entities' => array(
          'title' => t('Edit own game'),
          'description' => t('Allows users to edit own game.'),
          'restrict access' => TRUE,
      ),
  );

  return $permissions;
}

/**
 * implements hook_entity_property_info_alter(&$info)
 * @param type $info 
 */
function game_entity_property_info_alter(&$info) {

  return $info;
}

/* * *****************************************************************************
 * ******************************** Game API's **********************************
 * **************************************************************************** */

/**
 * Access callback for game.
 */
function game_access($op, $game, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'create':
    case 'update':
      return user_access('administer game entities', $account)
              || user_access('create game entities', $account);
    case 'play':
      return user_access('administer game entities', $account)
              || user_access('play game entities', $account);
    case 'view':
      return user_access('administer game entities', $account)
              || user_access('view game entities', $account);
    case 'edit':
      return user_access('administer game entities')
              || user_access('edit any game entities')
              || (user_access('edit own game entities') && ($game->uid == $account->uid));
  }
}

/**
 * Load a game.
 */
function game_load($gid, $reset = FALSE) {
  $game = game_load_multiple(array($gid), array(), $reset);
  return reset($game);
}

/**
 * Load multiple game based on certain conditions.
 */
function game_load_multiple($gids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('game', $gids, $conditions, $reset);
}

/**
 * Save game.
 */
function game_save($game) {
  entity_save('game', $game);
}

/**
 * Delete single game.
 */
function game_delete($game) {
  entity_delete('game', entity_id('game', $game));
}

/**
 * Delete multiple game.
 */
function game_delete_multiple($game_ids) {
  entity_delete_multiple('game', $game_ids);
}

/* * *****************************************************************************
 * ***************************** Game Type API's ********************************
 * **************************************************************************** */

/**
 * Access callback for game Type.
 */
function game_type_access($op, $entity = NULL) {
  return user_access('administer game types');
}

/**
 * Load game Type.
 */
function game_type_load($game_type) {
  return game_types($game_type);
}

/**
 * List of game Types.
 */
function game_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('game_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save game type entity.
 */
function game_type_save($game_type) {
  entity_save('game_type', $game_type);
}

/**
 * Delete single case type.
 */
function game_type_delete($game_type) {
  entity_delete('game_type', entity_id('game_type', $game_type));
}

/**
 * Delete multiple case types.
 */
function game_type_delete_multiple($game_type_ids) {
  entity_delete_multiple('game_type', $game_type_ids);
}

/* * *****************************************************************************
 * ***************************** Game Running API's ********************************
 * **************************************************************************** */

/**
 * Access callback for game Type.
 */
function running_game_access($op, $entity = NULL) {
  return user_access('administer running games');
}

/**
 * Load game Type.
 */
function running_game_load($running_game) {
  return running_game($running_game);
}

/**
 * List of game Types.
 */
function running_game($running_game_name = NULL) {
  $inst = entity_load_multiple_by_name('running_game', isset($running_game_name) ? array($running_game_name) : FALSE);
  return isset($running_game_name) ? reset($inst) : $inst;
}

/**
 * Save game type entity.
 */
function running_game_save($running_game) {
  return entity_save('running_game', $running_game);
}

/**
 * Delete single case type.
 */
function running_game_delete($running_game) {
  $commands = entity_load('running_game_command', FALSE, array('running_game_id' => $running_game->id));
  $ids = array_keys($commands);
  if (!empty($ids)) {
    entity_delete('running_game_command', $ids);
  }
  entity_delete('running_game', entity_id('running_game', $running_game));
}

/**
 * Delete multiple case types.
 */
function running_game_delete_multiple($running_game_ids) {
  entity_delete_multiple('running_game', $running_game_ids);
}



/* * *
 *  ------------------------------------ dont know if im using this hook action info
 *  maybe create a class that allowes me to send players message
 */

function game_action_info() {
  return array(
      'game_message_action' => array(
          'label' => t('Message'),
          'type' => 'game',
          'configurable' => TRUE,
          'triggers' => array('any', 'game'),
      ),
  );
}

function game_message_action(&$running_game, $context = array()) {

  if ($context['game_id'] == $entity->gid || $context['game_id'] == -1) {

    $running_game_command = array();
    $running_game_command['running_game_id'] = $running_game->id;
    $running_game_command['command_id'] = 1;
    $running_game_command['command_data'] = drupal_json_encode(array("message" => $context['message'], "time" => time()));
    $running_game_command_entity = entity_create("running_game_command", $running_game_command);
    $running_game_command_entity->save();
  }
}

/**
 * 	Hook into Action Core module in order to allow game to save actions that are allowed
 * 
 *  
 */
function game_message_action_form($context) {
  $game = entity_load('game');
  $string = array();
  $string[-1] = t("-- all game --");
  foreach ($game as $key => $game) {
    $string[$key] = $game->label();
  }

  $form = array();

  $form['game_id'] = array(
      '#title' => t('The game'),
      '#type' => 'select',
      '#description' => t('the game this action will affect.'),
      '#options' => $string,
  );
  $form['message'] = array(
      '#title' => t('Message'),
      '#type' => 'textfield',
      '#description' => t('the message that will be sent to game players.'),
  );
  return $form;
}

/**
 *
 * @param type $form
 * @param type $form_state 
 */
function game_message_action_validate($form, $form_state) {
  //if (! $account = user_load_by_name($form_state['values']['author']) ) {
  //  form_set_error('author', t('Please, provide a valid username'));
  //}
}

/**
 *
 * @param type $form
 * @param type $form_state
 * @return type 
 */
function game_message_action_submit($form, $form_state) {
  //dpm($form_state['values']);
  return array('game_id' => $form_state['values']['game_id'], 'message' => $form_state['values']['message']);
}

/**
 * Hook_cron
 * Running maintnance task on game
 *
 */
function game_cron() {
  // Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  $interval = variable_get('game_cron_interval', 60 * 60); //* 60
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  $always = TRUE;
  if (time() >= variable_get('game_cron_next_execution', 0) || $always) {
    // This is a silly example of a cron job.
    // It just makes it obvious that the job has run without
    // making any changes to your database.
    game_remove_all_running_games_that_ended();
    //watchdog('cron_example', 'cron_example ran');
    if (!empty($GLOBALS['game_cron_show_status_message'])) {
      drupal_set_message(t('game_cron executed at %time', array('%time' => date_iso8601(time(0)))));
    }
    variable_set('game_cron_next_execution', time() + $interval);
  }
}

/**
 * 
 */
function game_remove_all_running_games_that_ended() {
  module_load_include('inc', 'game', 'game.define');

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'running_game')
          ->propertyCondition('status', GAME_STATUS_ENDED);
  $running_games = array();
  $result = $query->execute();
  if (isset($result['running_game'])) {
    $ids = array_keys($result['running_game']);
    $running_games = entity_load('running_game', $ids);
  }
  foreach ($running_games as $running_game) {



    running_game_delete($running_game);
  }
}
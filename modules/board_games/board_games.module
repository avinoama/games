<?php

function board_games_menu() {
  $items = array();

  // form to add game
  /* $items['testing_board_game'] = array(
    'title' => 'testing_board_game',
    'page callback' => '_board_games_remove_default_game_type',
    'access arguments' => TRUE,
    ); */


  return $items;
}

function _form_board_games_steps() {
  return array(
      1 => array(
          'title' => 'Step One',
          'form' => 'board_games_set_default_board',
      ),
      2 => array(
          'title' => 'Step Two',
          'form' => 'board_games_submit_this_board',
      )
  );
}

function board_games_set_default_board($form, $form_state, $form_id) {
  
}

function board_games_submit_this_board() {
  
}

function board_games_form_alter($form, $form_state, $form_id) {

  if ($form["#id"] == "game-ui-form" && $form['#bundle'] == "board_game") {
    if (empty($form_state['step'])) {
      $form_state['step'] = 1;
      $form_state['step_information'] = _form_board_games_steps();
    }

    $form['actions']['submit']["#value"] = "next step";
    $form['actions']['submit']["#submit"][0] = "board_games_set_default_board";
  }
}

//  Do something when Game Type Board is being saved is bean saved
function board_games_game_presave($game) {
  
}

function board_games_running_game_presave($running_game) {

  if ($running_game->is_new && $running_game->type == "board_game") {
    $running_game->field_current_turn['und'][]["value"] = $running_game->participant_turn;
  }
}

function board_games_tile_set_owner_action(&$running_game, $context = array()) {
  if ($context['game_id'] == $running_game->gid) {

    $conditions = array("running_game_id" => $running_game->id, 'participant_session' => session_id());

    $entity = entity_load("running_game_participant", FALSE, $conditions);
    $player = $entity[key($entity)];

    if ($running_game->field_matrix['und'][$context['params']]['value'] == 0 || empty($running_game->field_matrix['und'][$context['params']]['value'])) {
      $running_game->field_matrix['und'][$context['params']]['value'] = $player->participant_turn;

      if ($running_game->save()) {
        $params = array("tile_id" => $context['params'], "participant_turn" => $player->participant_turn);
        $running_game_command = array();
        $running_game_command['running_game_id'] = $running_game->id;
        $running_game_command['command_id'] = 2;
        $running_game_command['command_data'] = drupal_json_encode(array("message" => $context['message'], "callback" => array("module" => "boardGame", "fn" => $context['callback'], "params" => $params), "time" => time()));
        $running_game_command_entity = entity_create("running_game_command", $running_game_command);
        $running_game_command_entity->save();
      } else {

        // dpm("cant save game instance");
      }
    } else {
      // the tile is already owned by user cannot
      return array("callback" => array("module" => "RunningGame", "fn" => "message", "params" => array("The tile is already owned")));
      //dpm("the tile is already owned by user cannot");
    }


    //  dpm("got to action " . board_games_tile_set_owner_action);
  }
}

function board_games_tile_set_owner_action_form($context) {
  $games = entity_load('game');
  $string = array();

  foreach ($games as $key => $game) {
    $string[$key] = $game->label();
  }

  $form = array();

  $form['game_id'] = array(
      '#title' => t('The game'),
      '#type' => 'select',
      '#description' => t('the game this action will affect.'),
      '#options' => $string,
  );

  return $form;
}

function board_games_tile_set_owner_action_validate($form, $form_state) {
  //if (! $account = user_load_by_name($form_state['values']['author']) ) {
  //  form_set_error('author', t('Please, provide a valid username'));
  //}
}

function board_games_tile_set_owner_action_submit($form, $form_state) {

  return array('game_id' => $form_state['values']['game_id']);
}

function board_games_game_init_load( $game, $running_game ) {
  if ($game->type == "board_game") {
    $path = drupal_get_path('module', 'board_games');
    drupal_add_js($path . "/board_games.js", 'file');
    drupal_add_css($path . "/board_games.css", 'file');
  }
}

function board_games_tile_set_action_form($context) {
  $games = entity_load('game');
  $string = array();

  foreach ($games as $key => $game) {
    $string[$key] = $game->label();
  }
  $form = array();

  $form['game_id'] = array(
      '#title' => t('The game'),
      '#type' => 'select',
      '#description' => t('the game this action will affect.'),
      '#options' => $string,
  );
  /*  $form['x_position'] = array(
    '#title' => t('tile x position'),
    '#type' => 'textfield',
    '#description' => t('the tile x position.'),
    );
    $form['y_position'] = array(
    '#title' => t('tile y position'),
    '#type' => 'textfield',
    '#description' => t('the tile y position.'),
    ); */
  /*
    $form['what_to_do'] = array(
    '#title' => t('That to do'),
    '#type' => 'option',
    '#description' => t('the tile y position.'),
    '#options' =>array("1"=>t('change binari state'),'2'=>'set tile belong to current player'),
    );
   */

  /*
    // Verify user permissions and provide an easier way to fill this field.
    if (user_access('access user profiles')) {
    $form['text']['#autocomplete_path'] = 'user/autocomplete';
    } */

  // No more options, return the form.
  return $form;
}

function board_games_tile_set_action_validate($form, $form_state) {
  //if (! $account = user_load_by_name($form_state['values']['author']) ) {
  //  form_set_error('author', t('Please, provide a valid username'));
  //}
}

function board_games_entity_property_info_alter(&$info) {

  $info['site']['properties']['current_tile_clicked'] = array(
      'label' => t('Current Tile clicked'),
      'type' => 'integer',
      'getter callback' => 'board_games_get_tile',
  );
  $info['site']['properties']['current_tile_clicked_value'] = array(
      'label' => t('Current Tile clicked value'),
      'type' => 'integer',
      'getter callback' => 'board_games_get_tile_value',
  );
  $info['site']['properties']['current_player_id'] = array(
      'label' => t('Current player id'),
      'type' => 'integer',
      'getter callback' => 'board_games_get_player_id',
  );
  $info['site']['properties']['current_player_turn'] = array(
      'label' => t('Current player turn'),
      'type' => 'integer',
      'getter callback' => 'board_games_current_player_turn',
  );
  $info['site']['properties']['current_game_matrix'] = array(
      'label' => t('Current Tile clicked'),
      'type' => 'list<integer>', //number_integer
      'getter callback' => 'board_games_current_matrix',
  );
}

/**
 * board_games_get_tile
 * gets tile from ajax loading 
 * @return type 
 */
function board_games_get_tile() {
  $tile_position = intval(check_plain($_POST['action']['params']['tile_position']));
  // chack valid tile position for current game
  return $tile_position;
}

function board_games_get_tile_value() {
  $tile_position = intval(check_plain($_POST['action']['params']['tile_position']));
  $running_game = _board_games_get_current_instance();
  return $running_game->field_matrix['und'][$tile_position]['value'];
}

function board_games_get_player_id() {
  $session = session_id();
  $game_session = check_plain($_POST['action']['game']['session']);

  $sql = "SELECT id FROM {running_game} WHERE session=':gs'";
  $sql2 = str_replace(":gs", $game_session, $sql);
  //$result  = db_query($sql, array(":gs"=>$game_session));
  $result = db_query($sql2);
  $running_game = $result->fetchObject();
  //  load current user session data
  $sql = "SELECT participant_turn FROM {running_game_participant} WHERE running_game_id=':gid' AND participant_session=':ses'";
  //$result  = db_query($sql, array(":gid"=>$running_game->gid,":ses"=>$session));
  $sql2 = str_replace(":gid", $running_game->id, $sql);
  $sql3 = str_replace(":ses", $session, $sql2);
  $result = db_query($sql3);

  $participant = $result->fetchObject();

  return $participant->participant_turn;
}

function board_games_current_player_turn() {
  $running_game = _board_games_get_current_instance();
  return $running_game->field_current_turn['und'][0]['value'];
}

function board_games_current_matrix() {
  //$running_game = _board_games_get_current_instance();
  $game_session = check_plain($_POST['action']['game']['session']);
  //SELECT fm.field_matrix_value FROM running_game gi LEFT JOIN field_revision_field_matrix fm ON (gi.id=fm.entity_id) WHERE gi.session='7b5c00a67c7e8a6247212c84dd38678c' ORDER BY delta ASC
  $sql = "SELECT field_revision_field_matrix.field_matrix_value FROM {running_game} LEFT JOIN {field_revision_field_matrix} ON (running_game.id=field_revision_field_matrix.entity_id) WHERE running_game.session=':gs' ORDER BY delta ASC";
  $sql2 = str_replace(":gs", $game_session, $sql);
  $result = db_query($sql2);

  if (empty($result)) {
    return array();
  }
  $field_matrix = $result->fetchAll();
  foreach ($field_matrix as $field) {
    $re[] = $field->field_matrix_value;
  }
  return $re;
}

function _board_games_get_current_instance($session = null) {
  if (empty($session)) {
    $session = check_plain($_POST['action']['game']['session']);
  }
  $conditions = array("session" => $session);
  running_game_load();
  $e = entity_load('running_game', array(), $conditions, FALSE);
  $k = array_keys($e);
  return $e[$k[0]];
}

function board_games_tile_set_action_submit($form, $form_state) {

  return array('game_id' => $form_state['values']['game_id']);
}

function _board_games_allowed_tile_type_options_list() {
  $options = array(
      1 => 'Divs',
      2 => 'Text boxes',
  );
  return $options;
}

function _board_games_add_default_fields() {
  $bundle = 'board_game';

  $fields = _board_games_default_fields();
  foreach ($fields as $field) {
    $field_info = field_info_field($field['field_name']);
    if (!$field_info) {

      field_create_field($field);

      $instance = array(
          'field_name' => $field['field_name'],
          'label' => $field['label'],
          'entity_type' => $field['entity_type'],
          'bundle' => $bundle,
      );
      $instance += $field;

      field_create_instance($instance);
    }
  }
}

/**
 * _board_games_add_default_games()
 * after adding game_type board game add default games
 */
function _board_games_add_default_games() {

}

/**
 *   _board_games_add_default_game_type()
 *  Adds default game type if not exsits.
 */
function _board_games_add_default_game_type() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'game_type')
          ->entityCondition('type', 'board_game');

  $result = $query->execute();
  if (!isset($result["game_type"])) {
    $values = array('uid' => 1, 'label' => 'board_game', 'type' => 'board_game', 'description' => 'bla bla bla');
    $new_ent = entity_create('game_type', $values)->save();
  }
}

function _board_games_remove_default_game_type() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'game_type')
          ->entityCondition('type', 'board_game');

  $result = $query->execute();
  if (isset($result["game_type"])) {
    $game_type = reset($result["game_type"]);
    entity_delete("game_type", $game_type->id);
  }
}

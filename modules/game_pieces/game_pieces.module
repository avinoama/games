<?php

/**
 * piece - is an Object that can be playable by players,
 * in order to do that we devide it in to 2 types of entities that will work togther.
 *
 * piece_type - will describe the piece shape and movement ability.
 * the game_piece will be attached a set of rules that will describe its movment.
 * When a player try to move a piece it will create a movement request
 * -> that movment will need to be validate
 * -> and will preform a move action
 * working on 2d so every position will use an X Y position.
 *
 * piece - will describe the piece position in a certine game and will belong to the game
 *
 * pieces can be add to a game by an action pieceCreate(Position,pieceType,AssignedTo=null);
 * When Trying To move a piece the client will send a move request(RunningGame, piece, Position) that will be evaluated by the pieceType movment rules
 *
 */

/**
 * 
 * Implements hook_entity_info().
 */
function game_pieces_entity_info() {
  $return['piece'] = array(
      'label' => t('piece'),
      'entity class' => 'piece',
      'controller class' => 'PieceController',
      'base table' => 'piece',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
          'bundle' => 'type',
      ),
      'bundle keys' => array(
          'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'piece_load',
      'view modes' => array(
          'full' => array(
              'label' => t('Default'),
              'custom settings' => FALSE,
          ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'game_pieces',
      'access callback' => 'game_pieces_access',
  );

  $return['piece_type'] = array(
      'label' => t('piece Type'),
      'entity class' => 'pieceType',
      'controller class' => 'PieceTypeController',
      'base table' => 'piece_type',
      'bundle of' => 'piece',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
          'name' => 'type',
          'label' => 'label',
      ),
      'module' => 'game_pieces',
      'admin ui' => array(
          'path' => 'admin/structure/piece-types',
          'file' => 'piece_type.admin.inc',
          'controller class' => 'PieceTypeUIController',
      ),
      //'label callback' => 'entity_class_label',
      //'uri callback' => 'entity_class_uri',
      'access callback' => 'game_pieces_access',
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function game_pieces_entity_info_alter(&$entity_info) {
  foreach (piece_types() as $type => $info) {
    $entity_info['piece']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
            'path' => 'admin/structure/piece-types/manage/%piece_type',
            'real path' => 'admin/structure/piece-types/manage/' . $type,
            'bundle argument' => 4,
        ),
    );
  }
}

/**
 * Load a piece.
 */
function piece_load($gid, $reset = FALSE) {
  $piece = piece_load_multiple(array($gid), array(), $reset);
  return reset($piece);
}

/**
 * Load multiple game based on certain conditions.
 */
function piece_load_multiple($gids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('piece', $gids, $conditions, $reset);
}

/**
 * Save game.
 */
function piece_save($piece) {
  entity_save('piece', $piece);
}

/**
 * Delete single piece.
 */
function piece_delete($piece) {
  entity_delete('piece', entity_id('piece', $piece));
}

/**
 * Delete multiple piece.
 */
function piece_delete_multiple($piece_ids) {
  entity_delete_multiple('piece', $piece_ids);
}

/* * *****************************************************************************
 * ***************************** piece Type API's ********************************
 * **************************************************************************** */

/**
 * Load piece Type.
 */
function piece_type_load($piece_type) {
  return piece_types($piece_type);
}

/**
 * List of piece Types.
 */
function piece_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('piece_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save piece type entity.
 */
function piece_type_save($piece_type) {
  entity_save('piece_type', $piece_type);
}

/**
 * Delete single case type.
 */
function piece_type_delete($piece_type) {
  entity_delete('piece_type', entity_id('piece_type', $piece_type));
}

/**
 * Delete multiple case types.
 */
function piece_type_delete_multiple($piece_type_ids) {
  entity_delete_multiple('piece_type', $piece_type_ids);
}

/**
 * Loads and returns the condition to a link. If it
 * doesn't exist, a new one will be created.
 *
 * @param $piece_type
 *    The rules link to which the condition should be loaded.
 */
function piece_type_load_condition_set($piece_type) {
  $condition_set = rules_config_load(piece_type_get_condition_set_name($piece_type));
  if ($condition_set != FALSE) {
    return $condition_set;
  } else {
    $conditions = rules_or(array(
        'piece' => array("label" => "Piece", "type" => "piece"),
        'position' => array("label" => "Position", "type" => "list")));
    //<integer>

    $conditions->label = 'Rules Movment: ' . $piece_type->label . ' condition';
    $conditions->save(piece_type_get_condition_set_name($piece_type), 'piece_type');
    return $conditions;
  }
}

/**
 * Returns the name condition set to a rules link.
 */
function piece_type_get_condition_set_name($piece_type) {
  return 'rules_' . $piece_type->type . '_move_conditions';
}

/**
 * Hook_game_init_load()
 * @param type $game
 * @param type $running_game
 */
function game_pieces_game_init_load($game, $running_game) {

  $path = drupal_get_path('module', 'game_pieces');
  drupal_add_js($path . "/game_pieces.js", 'file');
  drupal_add_css($path . "/game_pieces.css", 'file');
  //
  //  need to add local validations for movment rules

  $pieces_type = array();
  $pieces = array();

  if (property_exists($running_game, "field_pieces")) {
    $ids = array();
    foreach ($running_game->field_pieces as $lang => $val) {
      foreach ($val as $index => $piece) {
        $ids[] = $piece["target_id"];
      }
    }

    $pieces = piece_load_multiple($ids);
    $patterns = array();
    foreach ($pieces as $p) {
      if (!isset($pieces_type[$p->type])) {
        $piece_type = reset(entity_load('piece_type', FALSE, array('type' => $p->type)));
        //
        if (!empty($piece_type)) {
          $pieces_type[$p->type] = $piece_type;
          if (property_exists($piece_type, 'piece_pattern')) {
            if (!isset($patterns[$piece_type->piece_pattern])) {
              $patterns[$piece_type->piece_pattern] = game_pattern_load_by_machine_name($piece_type->piece_pattern);
            }
          }
          // $p->type . "_move_conditions";
        }
      }
    }
  }
  drupal_add_js(array('GamePieces' => array('pieces' => $pieces, 'piece_types' => $pieces_type, 'patterns' => $patterns)), 'setting');
}

/**
 * Implements hook_permission().
 */
function game_pieces_permission() {
  $permissions = array(
      'administer piece types' => array(
          'title' => t('Administer piece types'),
          'description' => t('Allows users to configure piece types and their fields.'),
          'restrict access' => TRUE,
      ),
      'create piece entities' => array(
          'title' => t('Create piece'),
          'description' => t('Allows users to create piece.'),
          'restrict access' => TRUE,
      ),
      'view piece entities' => array(
          'title' => t('View piece'),
          'description' => t('Allows users to view piece.'),
          'restrict access' => TRUE,
      ),
      'edit any piece entities' => array(
          'title' => t('Edit any piece'),
          'description' => t('Allows users to edit any piece.'),
          'restrict access' => TRUE,
      ),
      'edit own piece entities' => array(
          'title' => t('Edit own piece'),
          'description' => t('Allows users to edit own piece.'),
          'restrict access' => TRUE,
      ),
  );

  return $permissions;
}

/**
 * Access callback for piece.
 */
function game_pieces_access($op, $piece, $account = NULL, $entity_type = NULL) {
  global $user;
  return user_access('administer piece entities');
  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'create':
    case 'delete':
    case 'update':
      return user_access('administer piece entities', $account)
              || user_access('create piece entities', $account);
    case 'view':
      return user_access('administer piece entities', $account)
              || user_access('view piece entities', $account);
    case 'edit':
      return user_access('administer piece entities')
              || user_access('edit any piece entities')
              || (user_access('edit own piece entities') && ($piece->uid == $account->uid));
  }
}

function game_pieces_menu() {

  $piece_uri = "piece_type/%piece_type";
  $piece_uri_argument_position = 1;
  $items = array();

  $items[$piece_uri] = array(
      'title callback' => 'entity_label',
      'title arguments' => array('piece_type', $piece_uri_argument_position),
      'page callback' => 'game_ui_view',
      'page arguments' => array($piece_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('view', 'piece', $piece_uri_argument_position),
      'file' => 'game_pieces.pages.inc',
  );
  $items[$piece_uri . '/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );

  $items[$piece_uri . '/delete'] = array(
      'title' => 'Delete game',
      'title callback' => 'game_label',
      'title arguments' => array($piece_uri_argument_position),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('game_delete_form', $piece_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('edit', 'piece', $piece_uri_argument_position),
      'file' => 'game_pieces.admin.inc',
  );

  $items[$piece_uri . '/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('game_ui_form', $piece_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('edit', 'piece', $piece_uri_argument_position),
      'file' => 'game_pieces.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

function _game_pieces_pattern_add_default_fields() {
  $bundle = 'piece_pattern';
  $fields = _game_pieces_pattern_default_fields();
  foreach ($fields as $field) {
    $field_info = field_info_field($field['field_name']);
    if (!$field_info) {

      field_create_field($field);

      $instance = array(
          'field_name' => $field['field_name'],
          'label' => $field['label'],
          'entity_type' => $field['entity_type'],
          'bundle' => $bundle,
      );
      $instance += $field;

      field_create_instance($instance);
    }
  }
}

function _game_pieces_pattern_default_fields() {

  $fields[] = array(
      'field_name' => 'field_over_piece',
      'label' => t('over piece'),
      'type' => 'list_integer',
      'default_value' => 1,
      'cardinality' => 1,
      'entity_type' => 'game_pattern',
      'indexes' => array(
          'value' => array(
              0 => 'value',
          ),
      ),
      'required' => TRUE,
      'module' => 'list',
      'settings' => array('target_type' => 'text', 'target_bundles' => array(), 'allowed_values_function' => '_game_pieces_boolean_options'),
      'widget' => array(
          'active' => 1,
          'module' => 'options',
          'settings' => array(),
          'type' => 'options_select',
          'weight' => '5',
      ),
  );
  return $fields;
}
function _game_pieces_boolean_options() {
    $options = array(
      0 => 'FALSE',
      1 => 'TRUE',
  );
  return $options;
}
/**
 *
 */
function _game_pieces_running_game_add_default_fields() {
  // need to see how to include pieces to different bundle types
  $bundle = 'board_game';

  $fields = _game_pieces_running_game_default_fields();
  foreach ($fields as $field) {
    $field_info = field_info_field($field['field_name']);
    if (!$field_info) {

      field_create_field($field);

      $instance = array(
          'field_name' => $field['field_name'],
          'label' => $field['label'],
          'entity_type' => $field['entity_type'],
          'bundle' => $bundle,
      );
      $instance += $field;

      field_create_instance($instance);
    }
  }
}

/**
 *  
 * @return Array
 */
function _game_pieces_running_game_default_fields() {
  $fields = array();

  $fields[] = array(
      'field_name' => 'field_pieces',
      'label' => t('Pieces'),
      'type' => 'entityreference',
      'translatable' => FALSE,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_type' => 'running_game',
  );


  return $fields;
}

/**
 * Hook piece type creation
 * @param type $piece
 */
/*
  function game_pieces_piece_type_insert($piece_type) {
  _game_pieces_add_default_fields_for_bundle($piece_type->type);
  }


  function _game_pieces_add_default_fields_for_bundle($bundle) {
  $entity_type = "piece";
  $fields = _game_piece_type_default_fields();

  foreach ($fields as $field) {
  if ($field['entity_type'] == $entity_type) {
  if (!($field_info = field_info_field($field['field_name']))) {
  $field = field_create_field($field);
  }
  $instances = field_info_instances(null, $field["field_name"]);
  $instance = array(
  'field_name' => $field['field_name'],
  'entity_type' => $entity_type,
  'bundle' => $bundle,
  );
  $instance += $field;
  if (!isset($instances[$entity_type][$bundle])) {
  field_create_instance($instance);
  } else {
  if (!isset($instances[$entity_type][$bundle][$field["field_name"]])) {
  field_create_instance($instance);
  }
  }
  }
  }
  }
 */

/**
 * For all game_pieces bundle set default fields
 */
/*
  function game_pieces_add_default_fields_for_all_bundles() {

  $piece_types = entity_load("piece_type");

  if (!empty($piece_types)) {
  foreach ($piece_types as $piece_type) {
  _game_pieces_add_default_fields_for_bundle($piece_type->type);
  }
  }
  }
 */
function _game_piece_default_fields() {
  $fields = array();

  $fields[] = array(
      'field_name' => 'field_position',
      'label' => t('Position'),
      'type' => 'number_integer',
      'translatable' => FALSE,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_type' => 'piece',
  );

  return $fields;
}

function _game_piece_add_default_fields_for_bundle($bundle) {
  $entity_type = "piece";
  $fields = _game_piece_default_fields();

  foreach ($fields as $field) {
    if ($field['entity_type'] == $entity_type) {
      if (!($field_info = field_info_field($field['field_name']))) {
        $field = field_create_field($field);
      }
      $instances = field_info_instances(null, $field["field_name"]);
      $instance = array(
          'field_name' => $field['field_name'],
          'entity_type' => $entity_type,
          'bundle' => $bundle,
      );
      $instance += $field;
      if (!isset($instances[$entity_type][$bundle])) {
        field_create_instance($instance);
      } else {
        if (!isset($instances[$entity_type][$bundle][$field["field_name"]])) {
          field_create_instance($instance);
        }
      }
    }
  }
}

/**
 * Hook game_pattern type creation
 * @param type $piece
 */
function game_pieces_piece_type_insert($piece_type) {
  _game_piece_add_default_fields_for_bundle($piece_type->type);
}

/**
 *
 */
function _game_pieces_remove_default_games() {
  
}

function _game_pieces_remove_default_pices() {
  
}

<?php

function games_ui_menu() {
  $items = array();

  // form to add game
  $items['game/add'] = array(
      'title' => 'Add game',
      'page callback' => 'game_ui_admin_add_page',
      'access arguments' => array('administer game entities'),
      'file' => 'games_ui.admin.inc',
      'type' => MENU_LOCAL_ACTION,
      'tab_parent' => 'game',
      'tab_root' => 'game',
  );

  $game_uri = 'game/%game';
  $play_uri = 'play/%running_game';
  $game_uri_argument_position = 1;

  // will show game page
  $items[$play_uri] = array(
      'title' => 'Play',
      'page callback' => 'game_ui_play',
      'page arguments' => array($game_uri_argument_position),
      'access arguments' => array('play game entities'),
      'file' => 'games_ui.pages.inc',
      'theme callback' => 'games_ui_play_template',
  );
  $items[$play_uri . "/ajax"] = array(
      'page callback' => 'game_ui_instance_ajax_callback',
      'page arguments' => array($game_uri_argument_position),
      'access arguments' => array('play game entities'),
      'type' => MENU_CALLBACK,
      'file' => 'games_ui.actions.inc',
  );

  // will show game page
  $items[$game_uri] = array(
      'title callback' => 'entity_label',
      'title arguments' => array('game', $game_uri_argument_position),
      'page callback' => 'game_ui_view',
      'page arguments' => array($game_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('view', 'game', $game_uri_argument_position),
      'file' => 'games_ui.pages.inc',
  );
  // will show the view page
  $items[$game_uri . '/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );

  $items[$game_uri . '/delete'] = array(
      'title' => 'Delete game',
      'title callback' => 'game_label',
      'title arguments' => array($game_uri_argument_position),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('game_delete_form', $game_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('edit', 'game', $game_uri_argument_position),
      'file' => 'games_ui.admin.inc',
  );

  $items[$game_uri . '/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('game_ui_form', $game_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('edit', 'game', $game_uri_argument_position),
      'file' => 'games_ui.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items[$game_uri . '/play'] = array(
      'title' => 'Play',
      'page callback' => 'game_ui_create_instance',
      'page arguments' => array($game_uri_argument_position),
      'access arguments' => array('administer game types'),
      'file' => 'games_ui.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (game_types() as $type => $info) {
    $items['game/add/' . $type] = array(
        'title' => 'Add game',
        'page callback' => 'game_ui_add',
        'page arguments' => array(2),
        'access callback' => 'entity_access',
        'access arguments' => array('create', 'game', $type),
        'file' => 'games_ui.admin.inc',
    );
  }

  $items['admin/structure/game-types/%game_type/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('game_ui_type_form_delete_confirm', 4),
      'access arguments' => array('administer game types'),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM,
      'file' => 'games_ui.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
/*
  function games_ui_menu_alter(&$items) {
  // Set the theme callback function for all node pages. As per the
  // standard behavior for hook_menu() properties, this will be
  // inherited by all paths underneath node/%node as well, unless
  // they define their own theme callback.
  dpm($items);
  $play_uri = 'play/%running_game';
  $items[$play_uri]['theme callback'] = 'games_ui_html5_play_default_theme';
  } */

function games_ui_custom_theme() {
  // check path using arg(0)
  // check $user
  // do whatever special checking you want and simply return theme key (name of theme folder most of the time)
  /*
    if (arg(0) == 'play') {
    // print_r(arg());
    return 'games_ui_play_template';
    }
   *
   */
}

function games_ui_theme() {
  return array(
      'games_ui_play_template' => array(
          'template' => 'game_ui_play',
          'variables' => array('game' => NULL, 'running_game' => NULL, 'status' => NULL, 'num_players' => NULL, 'player_name' => NULL),
      ),
  );
}

function games_ui_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'games_ui'),
  );
}

function games_ui_preprocess_page(&$vars) {
  if (arg(0) == 'play') {
    //drupal_add_library('system', 'ui.resizable');
    $path = drupal_get_path('module', 'games_ui');
    drupal_add_js($path . "/games_instance.js", 'file');
    drupal_add_css($path . "/games_ui.css", 'file');
  }
}

function startsWith($haystack, $needle) {
  return !strncmp($haystack, $needle, strlen($needle));
}

function games_ui_view() {
  $gid = arg(1);
  $game = game_load($gid);
  //dpm($game);
  $string = "";
  foreach ($game as $key => $field) {
    if (startsWith($key, "field")) {
      if (isset($field["und"][0]["value"])) {
        $string .= $key . " " . $field["und"][0]["value"] . "<br>";
      }
    }
  }
  return "title : " . $game->title . "<br>description:" . $game->description . "<br>" . $string;
}

/**
 * This hook is called at the very beginning of views processing,
 * before anything is done.
 *
 * Adding output to the view can be accomplished by placing text on
 * $view->attachment_before and $view->attachment_after.
 */
function game_ui_views_pre_view(&$view, &$display_id, &$args) {
  //dpm($view);
}
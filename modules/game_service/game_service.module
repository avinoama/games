<?php
/**
 * @file
 * 
 */
/**
	remember 
	 $action_mapping = array(
      'GET' => 'retrieve', 
      'POST' => 'create', 
      'PUT' => 'update', 
      'DELETE' => 'delete',
    );
*/

/**
 * Implements hook_services_resources().
 */
function game_service_services_resources() {
  return array(
   'game' => array(
     'retrieve' => array(
       'help' => 'Retrieve a game',
       'file' => array('file' => 'inc', 'module' => 'game_service'),
       'callback' => '_game_service_retrieve',
       'access callback' => '_game_service_access',
       'access arguments' => array('view'),
       'access arguments append' => TRUE,
       'args' => array(
         array(
           'name' => 'id',
           'type' => 'int',
           'description' => 'The id of the game to get',
           'source' => array('path' => '0'),
           'optional' => FALSE,
         ),
       ),
     ),
     'create' => array(
       'help' => 'Creates a game',
       'file' => array('file' => 'inc', 'module' => 'game_service'),
       'callback' => '_game_service_create',
       'access arguments' => array('game resource create'),
       'access arguments append' => FALSE,
       'args' => array(
         array(
           'name' => 'data',
           'type' => 'struct',
           'description' => 'The game object',
           'source' => 'data',
           'optional' => FALSE,
         ),
       ),
     ),
     'update' => array(
       'help' => 'Updates a game',
       'file' => array('file' => 'inc', 'module' => 'game_service'),
       'callback' => '_game_service_update',
       'access callback' => '_game_service_access',
       'access arguments' => array('update'),
       'access arguments append' => TRUE,
       'args' => array(
         array(
           'name' => 'id',
           'type' => 'int',
           'description' => 'The id of the game to update',
           'source' => array('path' => '0'),
           'optional' => FALSE,
         ),
         array(
           'name' => 'data',
           'type' => 'struct',
           'description' => 'The game data object',
           'source' => 'data',
           'optional' => FALSE,
         ),
       ),
     ),
     'delete' => array(
       'help' => 'Deletes a game',
       'file' => array('file' => 'inc', 'module' => 'game_service'),
       'callback' => '_game_service_delete',
       'access callback' => '_game_service_access',
       'access arguments' => array('delete'),
       'access arguments append' => TRUE,
       'args' => array(
         array(
           'name' => 'gid',
           'type' => 'int',
           'description' => 'The id of the game to delete',
           'source' => array('path' => '0'),
           'optional' => FALSE,
         ),
       ),
     ),
     'index' => array(
       'help' => 'Retrieves a listing of games',
       'file' => array('file' => 'inc', 'module' => 'game_service'),
       'callback' => '_game_service_index',
       'access callback' => 'user_access',
       'access arguments' => array('access content'),
       'access arguments append' => FALSE,
       'args' => array(array(
           'name' => 'page',
           'type' => 'int',
           'description' => '',
           'source' => array(
             'param' => 'page',
           ),
           'optional' => TRUE,
           'default value' => 0,
         ),
         array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
         ),
       ),
     ),
   ),
  'running_game'=>array(
    'operations' => array(
     'retrieve' => array(
       'help' => 'Retrieve a running game',
       'file' => array('file' => 'inc', 'module' => 'game_service'),
       'callback' => '_running_game_service_retrieve',
       'access callback' => '_game_service_access',
       'access arguments' => array('view'),
       'access arguments append' => TRUE,
       'args' => array(
         array(
           'name' => 'id',
           'type' => 'int',
           'description' => 'The id of the game to get',
           'source' => array('path' => '0'),
           'optional' => FALSE,
         ),
       ),
   		),
   		'index' => array(
       'help' => 'Retrieves a listing of running games',
       'file' => array('file' => 'inc', 'module' => 'game_service'),
       'callback' => '_running_game_service_index',
       'access callback' => 'user_access',
       'access arguments' => array('access content'),
       'access arguments append' => FALSE,
       'args' => array(
          array(
           'name' => 'gid',
           'type' => 'int',
           'description' => 'The id of the game to get',
           'source' => array(
             'param' => 'gid',
           ),
           'optional' => TRUE,
         ),
       array(
           'name' => 'page',
           'type' => 'int',
           'description' => '',
           'source' => array(
             'param' => 'page',
           ),
           'optional' => TRUE,
           'default value' => 0,
         ),
         array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
         ),
       ),
     ),
    ),
 		'actions' => array(
        'trigger' => array(
          'file' => array('type' => 'inc', 'module' => 'game_service', 'name' => 'resources/running_game_resource'),
          'help'   => t('Trigger an Event to a game.'),
          'access callback' => '_game_service_access',
          'access arguments' => array('update'),
          'access arguments append' => TRUE,
          'callback' => '_running_game_resource_trigger',
          'args'     => array(
            array(
              'name'         => 'id',
              'type'         => 'int',
              'description'  => t('The running game id.'),
              'source'       => array('data' => 'id'),
              'optional'     => FALSE,
            ),
            array(
              'name'         => 'event',
              'type'         => 'text',
              'description'  => t('The event to trigger.'),
              'source'       => array('data' => 'event'),
              'optional'     => TRUE,
            ),
            array(
              'name'         => 'params',
              'type'         => 'struct',//'array',
              'description'  => t('The parameters to pass to the event'),
              'source'       => array('data' => 'params'),
              'optional'     => TRUE,
            ),            
          ),
        ),
        'commands' => array(
          'file' => array('type' => 'inc', 'module' => 'game_service', 'name' => 'resources/running_game_resource'),
          'help'   => t('get game commands.'),
          'access callback' => '_game_service_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
          'callback' => '_running_game_resource_commands',
          'args'     => array(
            array(
              'name'         => 'id',
              'type'         => 'int',
              'description'  => t('The running game id.'),
              'source'       => array('data' => 'id'),
              'optional'     => FALSE,
            ),
						array(
              'name'         => 'time',
              'type'         => 'int',
              'description'  => t('The running game timestemp.'),
              'source'       => array('data' => 'time'),
              'optional'     => TRUE,
            ),
						array(
              'name'         => 'command_id',
              'type'         => 'int',
              'description'  => t('The last command id'),
              'source'       => array('data' => 'command_id'),
              'optional'     => TRUE,
            ),
          ),
        ),        
/*        'join' => array(
          'file' => array('type' => 'inc', 'module' => 'game_service', 'name' => 'resources/running_game_resource'),
          'help'   => t('join current running game.'),
          'access callback' => '_game_service_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
          'callback' => '_running_game_resource_join',
          'args'     => array(
            array(
              'running_game' => 'id',
            ),
          ),
        ),*/
        
     ),/* End actions*/
   ),
   
   );
}
/**
 * Implements hook_perm().
 */
function game_service_perm() {
    return array(
      'game resource create',
      'game resource view any note',
      'game resource view own notes',
      'game resource edit any note',
      'game resource edit own notes',
      'game resource delete any note',
      'game resource delete own notes',
    );
}

 /**
 * Access callback for the note resource.
 *
 * @param string $op
 *  The operation that's going to be performed.
 * @param array $args
 *  The arguments that will be passed to the callback.
 * @return bool
 *  Whether access is given or not.
 */
function _game_service_access($op, $args) {
global $user;
$access = FALSE;

  switch ($op) {
    case 'view':
      $game = game_load($args[0]);
      $access = user_access('game resource view any note');
      $access = $access || $game->uid == $user->uid && user_access('game resource view own notes');
      break;
    case 'update':
      return true;
      //$game = game_load($args[0]->id);
      $access = user_access('game resource edit any note');
      //$access = $access || $game->uid == $user->uid && user_access('game resource edit own notes');
      break;
    case 'delete':
      $game = game_load($args[0]);
      $access = user_access('game resource delete any note');
      $access = $access || $game->uid == $user->uid && user_access('game resource delete own notes');
      break;
	}
return $access;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function game_service_ctools_plugin_api($module, $api) {
  if ($module == 'services' && $api == 'services') {
    return array('version' => 3);
  }
}

<?php

/**
 * Implements hook_entity_info().
 */
function game_entity_info() {
  $return = array();
  $return['game'] = array(
      'label' => t('Game'),
      'entity class' => 'Game',
      'controller class' => 'GameController',
      'base table' => 'game',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'gid',
          'bundle' => 'type',
      ),
      'bundle keys' => array(
          'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'game_load',
      'view modes' => array(
          'full' => array(
              'label' => t('Default'),
              'custom settings' => FALSE,
          ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'game',
      'access callback' => 'game_access',
  );

  $return['game_type'] = array(
      'label' => t('Game Type'),
      'entity class' => 'GameType',
      'controller class' => 'GameTypeController',
      'base table' => 'game_type',
      'fieldable' => FALSE,
      'bundle of' => 'game',
      'exportable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
          'name' => 'type',
          'label' => 'label',
      ),
      'module' => 'game',
      // Enable the entity API's admin UI.
      'admin ui' => array(
          'path' => 'admin/structure/game-types',
          'file' => 'game.admin.inc',
          'controller class' => 'GameTypeUIController',
      ),
      'access callback' => 'game_type_access',
  );

  $return['game_instance'] = array(
      'label' => t('Game Instance'),
      'entity class' => 'GameInstance',
      'controller class' => 'GameInstanceController',
      'base table' => 'game_instance',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
          'bundle' => 'type',
      ),
      'bundle keys' => array(
          'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'game_instance_load',
      'view modes' => array(
          'full' => array(
              'label' => t('Default'),
              'custom settings' => FALSE,
          ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'game',
      'access callback' => 'game_instance_access',
      'admin ui' => array(
          'path' => 'admin/structure/game-instances',
          'file' => 'game.admin.inc',
          'controller class' => 'GameInstanceUIController',
      ),
  );

  $return['game_instance_participant'] = array(
      'label' => t('Game Instance Participant'),
      'entity class' => 'GameInstanceParticipant',
      'controller class' => 'GameInstanceParticipantController',
      'base table' => 'game_instance_participant',
      'fieldable' => FALSE,
      'entity keys' => array(
          'id' => 'id',
      ),
      'bundles' => array(),
      'load hook' => 'game_instance_participant_load',
      'view modes' => array(
          'full' => array(
              'label' => t('Default'),
              'custom settings' => FALSE,
          ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'game',
      'access callback' => 'game_instance_participant_access',
  );
  $return['game_instance_command'] = array(
      'label' => t('Game Instance Command'),
      'entity class' => 'GameInstanceCommand',
      'controller class' => 'GameInstanceCommandController',
      'base table' => 'game_instance_command',
      'fieldable' => FALSE,
      'entity keys' => array(
          'id' => "id",
      ),
      'bundles' => array(),
      'load hook' => 'game_instance_command_load',
      'view modes' => array(
          'full' => array(
              'label' => t('Default'),
              'custom settings' => FALSE,
          ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'game',
      'access callback' => 'game_instance_command_access',
  );

  return $return;
}

function game_preprocess_page(&$vars) {
  if (arg(0) == 'play') {
    //drupal_add_library('system', 'ui.resizable');
    $path = drupal_get_path('module', 'game');
    drupal_add_js($path . "/game_instance.js", 'file');
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function game_entity_info_alter(&$entity_info) {
  foreach (game_types() as $type => $info) {
    $entity_info['game']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
            'path' => 'admin/structure/game-types/manage/%game_type',
            'real path' => 'admin/structure/game-types/manage/' . $type,
            'bundle argument' => 4,
        ),
    );
    $entity_info['game_instance']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
            'path' => 'admin/structure/game-types/manage/%game_type',
            'real path' => 'admin/structure/game-types/manage/' . $type,
            'bundle argument' => 4,
        ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function game_menu() {
  $items = array();
  //  this will add a url in the main Trigger module to show all triggers that can be made
  /*
  $items['admin/structure/trigger/game'] = array(
      'title' => 'Game',
  );
   * 
   */
  // form to add game
  /*
  $items['game/add'] = array(
      'title' => 'Add game',
      'page callback' => 'game_admin_add_page',
      'access arguments' => array('administer game entities'),
      'file' => 'game.admin.inc',
      'type' => MENU_LOCAL_ACTION,
      'tab_parent' => 'game',
      'tab_root' => 'game',
  );

  $game_uri = 'game/%game';
  $play_uri = 'play/%game_instance';
  $game_uri_argument_position = 1;

  // will show game page
  $items[$play_uri] = array(
      'title' => 'Play',
      //'title arguments' => array('game_instance', $game_uri_argument_position),
      'page callback' => 'game_play',
      'page arguments' => array($game_uri_argument_position),
      'access arguments' => array('play game entities'),
      'file' => 'game.pages.inc',
  );
  $items[$play_uri . "/ajax"] = array(
      'page callback' => 'game_instance_ajax_callback',
      'page arguments' => array($game_uri_argument_position),
      'access arguments' => array('play game entities'),
      'type' => MENU_CALLBACK,
      'file' => 'game.actions.inc',
  );

  // will show game page
  $items[$game_uri] = array(
      'title callback' => 'entity_label',
      'title arguments' => array('game', $game_uri_argument_position),
      'page callback' => 'game_view',
      'page arguments' => array($game_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('view', 'game', $game_uri_argument_position),
      'file' => 'game.pages.inc',
  );
  // will show the view page
  $items[$game_uri . '/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );

  $items[$game_uri . '/delete'] = array(
      'title' => 'Delete game',
      'title callback' => 'game_label',
      'title arguments' => array($game_uri_argument_position),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('game_delete_form', $game_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('edit', 'game', $game_uri_argument_position),
      'file' => 'game.admin.inc',
  );

  $items[$game_uri . '/edit'] = array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('game_form', $game_uri_argument_position),
      'access callback' => 'entity_access',
      'access arguments' => array('edit', 'game', $game_uri_argument_position),
      'file' => 'game.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items[$game_uri . '/play'] = array(
      'title' => 'Play',
      'page callback' => 'game_create_instance',
      'page arguments' => array($game_uri_argument_position),
      'access arguments' => array('administer game types'),
      'file' => 'game.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (game_types() as $type => $info) {
    $items['game/add/' . $type] = array(
        'title' => 'Add game',
        'page callback' => 'game_add',
        'page arguments' => array(2),
        'access callback' => 'entity_access',
        'access arguments' => array('create', 'game', $type),
        'file' => 'game.admin.inc',
    );
  }

  $items['admin/structure/game-types/%game_type/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('game_type_form_delete_confirm', 4),
      'access arguments' => array('administer game types'),
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM,
      'file' => 'game.admin.inc',
  );
*
 * 
 */
  return $items;
}

/**
 * Implements hook_permission().
 */
function game_permission() {
  $permissions = array(
      'administer game types' => array(
          'title' => t('Administer game types'),
          'description' => t('Allows users to configure game types and their fields.'),
          'restrict access' => TRUE,
      ),
      'create game entities' => array(
          'title' => t('Create games'),
          'description' => t('Allows users to create games.'),
          'restrict access' => TRUE,
      ),
      'play game entities' => array(
          'title' => t('play games'),
          'description' => t('Allows users to play games.'),
          'restrict access' => TRUE,
      ),
      'view game entities' => array(
          'title' => t('View games'),
          'description' => t('Allows users to view games.'),
          'restrict access' => TRUE,
      ),
      'edit any game entities' => array(
          'title' => t('Edit any games'),
          'description' => t('Allows users to edit any games.'),
          'restrict access' => TRUE,
      ),
      'edit own game entities' => array(
          'title' => t('Edit own games'),
          'description' => t('Allows users to edit own games.'),
          'restrict access' => TRUE,
      ),
  );

  return $permissions;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function game_entity_property_info_alter(&$info) {
  $properties = &$info['game']['properties'];
  $properties['created'] = array(
      'label' => t("Date created"),
      'type' => 'date',
      'description' => t("The date the node was posted."),
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer nodes',
      'schema field' => 'created',
  );
  $properties['changed'] = array(
      'label' => t("Date changed"),
      'type' => 'date',
      'schema field' => 'changed',
      'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
      'label' => t("Author"),
      'type' => 'user',
      'description' => t("The author of the game."),
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer game entities',
      'required' => TRUE,
      'schema field' => 'uid',
  );
}

/* * *****************************************************************************
 * ******************************** Game API's **********************************
 * **************************************************************************** */

/**
 * Access callback for game.
 */
function game_access($op, $game, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'create':
    case 'update':
      return user_access('administer game entities', $account)
              || user_access('create game entities', $account);
    case 'play':
      return user_access('administer game entities', $account)
              || user_access('play game entities', $account);
    case 'view':
      return user_access('administer game entities', $account)
              || user_access('view game entities', $account);
    case 'edit':
      return user_access('administer game entities')
              || user_access('edit any game entities')
              || (user_access('edit own game entities') && ($game->uid == $account->uid));
  }
}

/**
 * Load a game.
 */
function game_load($gid, $reset = FALSE) {
  $games = game_load_multiple(array($gid), array(), $reset);
  return reset($games);
}

/**
 * Load multiple games based on certain conditions.
 */
function game_load_multiple($gids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('game', $gids, $conditions, $reset);
}

/**
 * Save game.
 */
function game_save($game) {
  entity_save('game', $game);
}

/**
 * Delete single game.
 */
function game_delete($game) {
  entity_delete('game', entity_id('game', $game));
}

/**
 * Delete multiple games.
 */
function game_delete_multiple($game_ids) {
  entity_delete_multiple('game', $game_ids);
}

/* * *****************************************************************************
 * ***************************** Game Type API's ********************************
 * **************************************************************************** */

/**
 * Access callback for game Type.
 */
function game_type_access($op, $entity = NULL) {
  return user_access('administer game types');
}

/**
 * Load game Type.
 */
function game_type_load($game_type) {
  return game_types($game_type);
}

/**
 * List of game Types.
 */
function game_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('game_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save game type entity.
 */
function game_type_save($game_type) {
  entity_save('game_type', $game_type);
}

/**
 * Delete single case type.
 */
function game_type_delete($game_type) {
  entity_delete('game_type', entity_id('game_type', $game_type));
}

/**
 * Delete multiple case types.
 */
function game_type_delete_multiple($game_type_ids) {
  entity_delete_multiple('game_type', $game_type_ids);
}

/* * *****************************************************************************
 * ***************************** Game Instance API's ********************************
 * **************************************************************************** */

/**
 * Access callback for game Type.
 */
function game_instance_access($op, $entity = NULL) {
  return user_access('administer game instance');
}

/**
 * Load game Type.
 */
function game_instance_load($game_instance) {
  return game_instance($game_instance);
}

/**
 * List of game Types.
 */
function game_instance($instance_name = NULL) {
  $instances = entity_load_multiple_by_name('game_instance', isset($instance_name) ? array($instance_name) : FALSE);
  return isset($instance_name) ? reset($instances) : $instances;
}

/**
 * Save game type entity.
 */
function game_instance_save($game_instance) {
  entity_save('game_instance', $game_instance);
}

/**
 * Delete single case type.
 */
function game_instance_delete($game_instance) {
  entity_delete('game_instance', entity_id('game_instance', $game_instance));
}

/**
 * Delete multiple case types.
 */
function game_instance_delete_multiple($game_instance_ids) {
  entity_delete_multiple('game_instance', $game_instance_ids);
}

/**
 * Implements hook_views_api().
 */
/*
function game_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'game'),
  );
}
 * 
 */

function game_trigger_info() {
  return array(
      'game' => array(
          'game_create' => array(
              'label' => t('When creating a new game'),
              'type' => 'game',
          ),
          'game_start' => array(
              'label' => t('When game status changes to game start'),
              'type' => 'game',
          ),
          'game_turn_start' => array(
              'label' => t('When player turn starts'),
              'type' => 'game',
          ),
          'game_turn_end' => array(
              'label' => t('When player turn ends'),
              'type' => 'game',
          ),
          'game_end' => array(
              'label' => t('When game status changes to game end'),
              'type' => 'game',
          ),
      ),
  );
}

function game_action_info() {
  return array(
      'game_message_action' => array(
          'label' => t('Message'),
          'type' => 'game',
          'configurable' => TRUE,
          'triggers' => array('any', 'game'),
      ),
  );
}

function game_message_action(&$game_instance, $context = array()) {
  //dpm($game_instance);
  //dpm($context);
  if ($context['game_id'] == $entity->gid || $context['game_id']==-1) {
    
        $game_instance_command = array();
        $game_instance_command['instance_id'] = $game_instance->id;
        $game_instance_command['command_id'] = 1;
        $game_instance_command['command_data'] = drupal_json_encode(array("message" => $context['message'], "time" => time()));
        $game_instance_command_entity = entity_create("game_instance_command", $game_instance_command);    
        $game_instance_command_entity->save();
  }
}

/**
 * 	Hook into Action Core module in order to allow game to save actions that are allowed
 * 
 *  
 */
function game_message_action_form($context) {
  $games = entity_load('game');
  $string = array();
  $string[-1] = t("-- all games --");
  foreach ($games as $key => $game) {
    $string[$key] = $game->label();
  }

  $form = array();

  $form['game_id'] = array(
      '#title' => t('The game'),
      '#type' => 'select',
      '#description' => t('the game this action will affect.'),
      '#options' => $string,
  );
  $form['message'] = array(
      '#title' => t('Message'),
      '#type' => 'textfield',
      '#description' => t('the message that will be sent to game players.'),
  );
  return $form;
}

/**
 *
 * @param type $form
 * @param type $form_state 
 */
function game_message_action_validate($form, $form_state) {
  //if (! $account = user_load_by_name($form_state['values']['author']) ) {
  //  form_set_error('author', t('Please, provide a valid username'));
  //}
}

/**
 *
 * @param type $form
 * @param type $form_state
 * @return type 
 */
function game_message_action_submit($form, $form_state) {
dpm($form_state['values']);
  return array('game_id' => $form_state['values']['game_id'], 'message' => $form_state['values']['message']);
}
<?php

function game_board_install() {
  $values = array('uid' => 1, 'label' => 'board_game', 'type' => 'board_game', 'description' => 'bla bla bla');
  $new_ent = entity_create('game_type', $values)->save();
}

function game_board_uninstall() {
  $values = array('uid' => 1, 'label' => 'board_game', 'type' => 'board_game', 'description' => 'bla bla bla');
  $game_type = entity_create('game_type', $values);
  game_type_delete('game_type', array($game_type->id));
}

function _form_game_board_steps() {
  return array(
      1 => array(
          'title' => 'Step One',
          'form' => 'game_board_set_default_board',
      ),
      2 => array(
          'title' => 'Step Two',
          'form' => 'game_board_submit_this_board',
      )
  );
}

function game_board_set_default_board($form, $form_state, $form_id) {
  
}

function game_board_submit_this_board() {
  
}

function game_board_form_alter($form, $form_state, $form_id) {

  if ($form["#id"] == "game-ui-form" && $form['#bundle'] == "board_game") {
    if (empty($form_state['step'])) {
      $form_state['step'] = 1;
      $form_state['step_information'] = _form_game_board_steps();
    }
    dpm($form);
    dpm($form['actions']['submit']);
    $form['actions']['submit']["#value"]="next step";
    $form['actions']['submit']["#submit"][0]="game_board_set_default_board";
    
    /*
    $form['#next'] = array(
        '#type' => 'submit',
        '#value' => t('Next'),
        '#name' => 'next',
        '#submit' => array('game_board_set_default_board'),
    );
    */
     //$form['actions']['submit'] //$submit + array('game_ui_form_submit'),
         
   // dpm($form);
  }
}

function game_board_game_instance_presave($game_instance) {
  //dpm($game_instance);
  if ($game_instance->type == "board_game") {


    if (isset($game_instance->field_board_width) && isset($game_instance->field_board_height)) {
      $bundle = $game_instance->type;
      $entity_type = 'game_instance';

      // phone_user_type_add_default_fields_to_bundle($phone_user_type);
      $i = 0;
      $fileds[$i]["field_name"] = 'field_matrix';
      $fileds[$i]["field_type"] = 'text';
      $fileds[$i]["field_label"] = 'matrix';
      $fileds[$i]["default_value"] = '0';
      $fileds[$i]["cardinality"] = FIELD_CARDINALITY_UNLIMITED;
      $fileds[$i]["settings"]["target_type"] = "text";
      $fileds[$i]["settings"]["target_bundles"] = array($bundle);
      $i++;
      $fileds[$i]["field_name"] = 'field_players';
      $fileds[$i]["field_type"] = 'entityreference';
      $fileds[$i]["field_label"] = 'Players';
      $fileds[$i]["cardinality"] = FIELD_CARDINALITY_UNLIMITED;
      $fileds[$i]["settings"]["target_type"] = "entity";
      $fileds[$i]["settings"]["target_bundles"] = array($bundle);


      $count_tiles = $game_instance->field_board_width + $game_instance->field_board_height;

      // foreach filed
      foreach ($fileds as $field) {
        if (isset($game_instance->is_new)) {
          if (!field_info_field($field["field_name"])) {
            field_create_field($field);
          }

          $instance = array(
              'field_name' => $field["field_name"],
              'label' => $field["field_label"],
              'entity_type' => $entity_type,
              'bundle' => $bundle,
          );

          //$game_instance
          $instances = field_info_instances(null, $field["field_name"]);

          if (!isset($instances['game_instance']['board_game'])) {
            //dpm("Create Instance");
            field_create_instance($instance);

            $game_instance->new_field = array(
                'field_name' => $instance['field_name'],
                'label' => $instance['label'],
                'entity_type' => $instance['entity_type'],
                'bundle' => $instance['bundle'],
            );
          } else {
            //dpm("instances already exsit");
            $game_instance->new_field = $instances['game_instance']['board_game']['field_matrix'];
          }

          field_attach_insert('game_instance', $game_instance);
        } else {
          field_attach_update('game_instance', $game_instance);
        }
      }
      // end for each filed
    } else {

      if (isset($game_instance->is_new)) {
        //dpm($game_instance);
        //$gi = game_instance_load($game_instance->gid);
        //dpm($gi);
      }
    }
  }
}

/*
  function game_board_trigger_info() {
  return array(
  'game' => array(
  'game_board_tile_on_click' => array(
  'label' => t('When tile click event is called'),
  'type' => 'game',
  ),
  'game_board_tile_on_hover' => array(
  'label' => t('When tile hover event is called'),
  'type' => 'game',
  ),
  ),
  );
  }

  function game_board_action_info() {
  return array(
  'game_board_tile_set_owner_action' => array(
  'label' => t('Tile set owner'),
  'type' => 'game',
  'configurable' => TRUE,
  'triggers' => array('any', 'game'),
  ),
  );
  }
 */

function game_board_tile_set_owner_action(&$game_instance, $context = array()) {
  if ($context['game_id'] == $game_instance->gid) {

    $conditions = array("instance_id" => $game_instance->id, 'participant_session' => session_id());

    $entity = entity_load("game_instance_participant", FALSE, $conditions);
    $player = $entity[key($entity)];

    //dpm($player->participant_turn);
    // dpm($game_instance->field_matrix['und']);
    if ($game_instance->field_matrix['und'][$context['params']]['value'] == 0 || empty($game_instance->field_matrix['und'][$context['params']]['value'])) {
      $game_instance->field_matrix['und'][$context['params']]['value'] = $player->participant_turn;

      if ($game_instance->save()) {
        $params = array("tile_id" => $context['params'], "participant_turn" => $player->participant_turn);
        $game_instance_command = array();
        $game_instance_command['instance_id'] = $game_instance->id;
        $game_instance_command['command_id'] = 2;
        $game_instance_command['command_data'] = drupal_json_encode(array("message" => $context['message'], "callback" => array("module" => "boardGame", "fn" => $context['callback'], "params" => $params), "time" => time()));
        $game_instance_command_entity = entity_create("game_instance_command", $game_instance_command);
        $game_instance_command_entity->save();
      } else {

        dpm("cant save game instance");
      }
    } else {
      // the tile is already owned by user cannot
      return array("callback" => array("module" => "gameInstance", "fn" => "message", "params" => array("The tile is already owned")));
      //dpm("the tile is already owned by user cannot");
    }


    //  dpm("got to action " . game_board_tile_set_owner_action);
  }
}

function game_board_tile_set_owner_action_form($context) {
  $games = entity_load('game');
  $string = array();

  foreach ($games as $key => $game) {
    $string[$key] = $game->label();
  }

  $form = array();

  $form['game_id'] = array(
      '#title' => t('The game'),
      '#type' => 'select',
      '#description' => t('the game this action will affect.'),
      '#options' => $string,
  );

  return $form;
}

function game_board_tile_set_owner_action_validate($form, $form_state) {
  //if (! $account = user_load_by_name($form_state['values']['author']) ) {
  //  form_set_error('author', t('Please, provide a valid username'));
  //}
}

function game_board_tile_set_owner_action_submit($form, $form_state) {

  return array('game_id' => $form_state['values']['game_id']);
}

function game_board_game_init_load($game) {
  if ($game->type == "board_game") {

    $path = drupal_get_path('module', 'game_board');
    drupal_add_js($path . "/game_board.js", 'file');
    drupal_add_css($path . "/game_board.css", 'file');
  }
}

function game_board_tile_set_action_form($context) {
  $games = entity_load('game');
  $string = array();
  //dpm($games);
  foreach ($games as $key => $game) {
    $string[$key] = $game->label();
  }
  $form = array();

  $form['game_id'] = array(
      '#title' => t('The game'),
      '#type' => 'select',
      '#description' => t('the game this action will affect.'),
      '#options' => $string,
  );
  /*  $form['x_position'] = array(
    '#title' => t('tile x position'),
    '#type' => 'textfield',
    '#description' => t('the tile x position.'),
    );
    $form['y_position'] = array(
    '#title' => t('tile y position'),
    '#type' => 'textfield',
    '#description' => t('the tile y position.'),
    ); */
  /*
    $form['what_to_do'] = array(
    '#title' => t('That to do'),
    '#type' => 'option',
    '#description' => t('the tile y position.'),
    '#options' =>array("1"=>t('change binari state'),'2'=>'set tile belong to current player'),
    );
   */

  /*
    // Verify user permissions and provide an easier way to fill this field.
    if (user_access('access user profiles')) {
    $form['text']['#autocomplete_path'] = 'user/autocomplete';
    } */

  // No more options, return the form.
  return $form;
}

function game_board_tile_set_action_validate($form, $form_state) {
  //if (! $account = user_load_by_name($form_state['values']['author']) ) {
  //  form_set_error('author', t('Please, provide a valid username'));
  //}
}

function game_board_entity_property_info_alter(&$info) {
  $info['site']['properties']['current_tile_clicked'] = array(
      'label' => t('Current Tile clicked'),
      'type' => 'integer',
      'getter callback' => 'game_board_get_tile',
  );
}

/**
 * game_board_get_tile
 * gets tile from ajax loading 
 * @return type 
 */
function game_board_get_tile() {
  $tile_position = intval(check_plain($_POST['action']['params']['tile_position']));
  // chack valid tail position for current game
  return $tile_position;
}

function game_board_tile_set_action_submit($form, $form_state) {

  return array('game_id' => $form_state['values']['game_id']);
}